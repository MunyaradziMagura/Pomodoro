import { Button, VerticalBox, ListView, HorizontalBox, LineEdit } from "std-widgets.slint";
import {taskAddition} from "./taskAddition.slint";
import {subTask} from "./subTask.slint";
import {taskVisualiser} from "./TaskVisualiser.slint";
export component AppWindow inherits Window {
    min-width: 1000px;
    min-height: 500px;
    in-out property <string> myTask: "here";
    in-out property <int> counter: 0;
    //    in-out property <[{text: string}]> collected-tasks:[{ text: "working on rust" }, { text: "doing some home work" }];
in-out property <[string]> collected-tasks:["working on rust", "doing some home work"];
    callback request-increase-value();
    callback current-task(string);
    callback remove-task(int);
    callback stop-timer();
    GridLayout {
        spacing: 0.2rem;
        Row {
            // CODE FOR THE PONODORO
            Rectangle {
                background: red;
                min-width: (root.width / 3) * 2;
                VerticalLayout {
                    // THIS IS THE CODE FOR THE BUTTONS OF THE CLOCK
                    HorizontalLayout {
                        vertical-stretch: 2;
                        alignment: stretch;
                        Rectangle {
                            background: red;
                            Button {
                                clicked => {
                                    stop-timer()
                                }
                            }
                        }
                    }

                    // THIS IS THE CODE FOR THE CLOCK
                    HorizontalLayout {
                        alignment: stretch;
                        vertical-stretch: 9;
                        Rectangle {
                            background: (time.has-focus) ? blue : red;
                            time := LineEdit {
                                font-size: 20rem;
                                placeholder-text: "20:15";
                            }
                        }
                    }

                    // THIS IS THE CODE FOR BOTTOM OF THE SCREEN
                    HorizontalLayout {
                        alignment: stretch;
                        vertical-stretch: 1;
                        Rectangle {
                            background: blue;
                        }
                    }
                }
            }

            // CODE FOR THE TASK MANU

            Rectangle {
                background: blue;
                min-width: (root.width / 3);
                VerticalBox {
                    VerticalBox {
                        taskAddition {
                            addedTask(task_name) => {
                                // Update myTask property with the new task name
                        current-task(task_name);
                            }
                        }
                    }

                    VerticalBox {
                        Text {
                            text: "Tasks";
                            font-size: 2rem;
                        }

                        ListView {
                            for task[idx] in collected-tasks: Rectangle {
                                HorizontalLayout {
                                    padding-bottom: 1rem;
                                    HorizontalBox {
                                        LineEdit {
                                            text: task;
                                        }

                                        Button {
                                            text: "remove";
                                            clicked => {
                                                remove-task(idx);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
